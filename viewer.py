import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# # Read the CSV file generated by the C++ program.
# data = pd.read_csv("utils/equity_heatmap.csv", header=0, index_col=0)

# # Optional: Set up labels based on ranks (highest rank first).
# ranks = ["A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2"]

# plt.figure(figsize=(10, 8))
# ax = sns.heatmap(data, annot=True, cmap="viridis", xticklabels=ranks, yticklabels=ranks)
# plt.title("Equity Heatmap (vs. 2 Opponents)")
# plt.xlabel("Hole Card 1")
# plt.ylabel("Hole Card 2")

# # Save the figure as a PNG image.
# plt.savefig("equity_heatmap.png", dpi=300, bbox_inches="tight")
# plt.close()

# print("Heatmap image saved as equity_heatmap.png")

# increment = 5
# # Sample list of values representing the scale of the values for different numbers of clusters
# clusters = [_ + 1 for _ in range(160)]
# values = [11840.3, 11840.3, 7436.72, 6116.21, 4182.63, 4169.29, 4169.29, 2924.11, 2748.91, 2924.11, 2418.08, 2418.08, 2418.08, 2304.59, 2418.08, 2418.08, 1941.32, 2425.08, 1642.17, 1148.96, 1612.75, 2078.76, 1357, 2078.76, 1054.99, 1429.22, 890.992, 1475.99, 705.241, 705.241, 705.241, 705.241, 705.241, 705.241, 705.241, 1218.02, 705.241, 705.241, 705.241, 705.241, 705.241, 705.241, 705.241, 284.238, 705.241, 705.241, 705.241, 284.238, 705.241, 284.238, 705.241, 284.238, 705.241, 705.241, 169.225, 284.238, 284.238, 705.241, 284.238, 590.227, 284.238, 169.225, 169.225, 169.225, 0, 169.225, 169.225, 284.238, 284.238, 284.238, 284.238, 284.238, 284.238, 284.238, 284.238, 169.225, 169.225, 169.225, 169.225, 169.225, 169.225, 0, 284.238, 169.225, 169.225, 169.225, 0, 169.225, 169.225, 169.225, 284.238, 169.225, 169.225, 169.225, 169.225, 169.225, 169.225, 169.225, 169.225, 169.225, 169.225, 169.225, 169.225, 169.225, 284.238, 169.225, 0, 169.225, 0, 0, 284.238, 169.225, 169.225, 0, 0, 0, 169.225, 0, 0, 169.225, 0, 0, 0, 0, 169.225, 169.225, 169.225, 169.225, 0, 169.225, 169.225, 0, 169.225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 169.225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] # Example values for the elbow method

# plt.figure(figsize=(10, 6))
# plt.plot(clusters[::increment], values[::increment], marker='o')
# plt.title("Elbow Method for Clustering Preflop Hands")
# plt.xlabel("Number of Clusters")
# plt.ylabel("Scale of Values")
# plt.xticks(clusters[::increment], rotation=90)
# plt.grid()

# # Save the figure as a PNG image.
# plt.savefig("elbow_method_clustering_preflop_hands.png", dpi=300, bbox_inches="tight")
# plt.close()

# print("Elbow method plot saved as elbow_method_clustering_preflop_hands.png")

# # Add code to plot the distribution of Equity2P and Equity3P
# equity_data = pd.read_csv("utils/out.csv")

# # Skip the first row which contains an error
# equity_data = equity_data[equity_data['Equity2P'] != 'ERROR']

# # Convert equity columns to numeric
# equity_data['Equity2P'] = pd.to_numeric(equity_data['Equity2P'])
# equity_data['Equity3P'] = pd.to_numeric(equity_data['Equity3P'])

# plt.figure(figsize=(10, 6))
# sns.histplot(equity_data['Equity2P'], kde=True, color='blue', alpha=0.5, label='Equity2P')
# sns.histplot(equity_data['Equity3P'], kde=True, color='red', alpha=0.5, label='Equity3P')
# plt.title("Distribution of Equity Values")
# plt.xlabel("Equity Value")
# plt.ylabel("Frequency")
# plt.legend()
# plt.grid(alpha=0.3)

# # Save the figure as a PNG image
# plt.savefig("equity_distribution.png", dpi=300, bbox_inches="tight")
# plt.close()

# # Add code to plot the distribution of Equity2P and Equity3P
# equity_data2 = pd.read_csv("utils/out copy.csv")

# # Skip the first row which contains an error
# equity_data2 = equity_data2[equity_data2['Equity2P'] != 'ERROR']

# # Convert equity columns to numeric
# equity_data2['Equity2P'] = pd.to_numeric(equity_data2['Equity2P'])
# equity_data2['Equity3P'] = pd.to_numeric(equity_data2['Equity3P'])

# plt.figure(figsize=(10, 6))
# sns.histplot(equity_data2['Equity2P'], kde=True, color='blue', alpha=0.5, label='Equity2P')
# sns.histplot(equity_data2['Equity3P'], kde=True, color='red', alpha=0.5, label='Equity3P')
# plt.title("Distribution of Equity Values")
# plt.xlabel("Equity Value")
# plt.ylabel("Frequency")
# plt.legend()
# plt.grid(alpha=0.3)

# # Save the figure as a PNG image
# plt.savefig("equity_distribution_more_info.png", dpi=300, bbox_inches="tight")
# plt.close()

# print("Equity distribution plots saved")

computers = ['malleole', 'albatros', 'autruche','bengali', 'coucou', 'dindon','epervier', 'faisan','sternum', 'phalange', 'sacrum', 'bentley', 'mazda', 'nissan', 'porsche']

jumps = []
final_value = 7802081
count = final_value // len(computers)

for i in range(len(computers)):
    print("./spin_and_go_abstraction_with_rake/utils/equity_river_calculation ./spin_and_go_abstraction_with_rake/utils/river_equities_processed.csv 300 28 " + str(1 + i * count) + ' ' + str(1 + (i + 1) * count) + " output_" + computers[i] + ".csv")


